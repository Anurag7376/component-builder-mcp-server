import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

const {{ComponentName}} = DialogPrimitive.Root

const {{ComponentName}}Trigger = DialogPrimitive.Trigger

const {{ComponentName}}Portal = DialogPrimitive.Portal

const {{ComponentName}}Close = DialogPrimitive.Close

const {{ComponentName}}Overlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
{{ComponentName}}Overlay.displayName = DialogPrimitive.Overlay.displayName

const {{ComponentName}}Content = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & {
    {{#each props}}
    {{name}}{{#unless required}}?{{/unless}}: {{type}}{{#if description}} // {{description}}{{/if}}
    {{/each}}
  }
>(({ className, children, {{#each props}}{{name}}, {{/each}}...props }, ref) => (
  <{{ComponentName}}Portal>
    <{{ComponentName}}Overlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {{#if accessibility.ariaLabel}}aria-label="{{accessibility.ariaLabel}}"{{/if}}
      {{#if accessibility.role}}role="{{accessibility.role}}"{{/if}}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </{{ComponentName}}Portal>
))
{{ComponentName}}Content.displayName = DialogPrimitive.Content.displayName

const {{ComponentName}}Header = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
{{ComponentName}}Header.displayName = "{{ComponentName}}Header"

const {{ComponentName}}Footer = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
{{ComponentName}}Footer.displayName = "{{ComponentName}}Footer"

const {{ComponentName}}Title = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
{{ComponentName}}Title.displayName = DialogPrimitive.Title.displayName

const {{ComponentName}}Description = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
{{ComponentName}}Description.displayName = DialogPrimitive.Description.displayName

export {
  {{ComponentName}},
  {{ComponentName}}Portal,
  {{ComponentName}}Overlay,
  {{ComponentName}}Close,
  {{ComponentName}}Trigger,
  {{ComponentName}}Content,
  {{ComponentName}}Header,
  {{ComponentName}}Footer,
  {{ComponentName}}Title,
  {{ComponentName}}Description,
}